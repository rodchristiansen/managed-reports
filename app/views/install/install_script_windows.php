<?php header("Content-Type: text/plain"); ?>
# Windows Installer Script (Generated by MunkiReport PHP server)

$BASEURL = "<?php echo conf('webhost') . conf('subdirectory'); ?>"
$INSTALLDIR = "C:\ProgramData\ManagedReporting"
$SCRIPTSDIR = Join-Path $INSTALLDIR "scripts"
$CONFIGDIR = Join-Path $INSTALLDIR "config"
$CACHEDIR = Join-Path $INSTALLDIR "cache"
$LOGDIR = Join-Path $INSTALLDIR "logs"
$TOOLSDIR = Join-Path $INSTALLDIR "tools"

# Create directories
New-Item -Path $SCRIPTSDIR -ItemType Directory -Force
New-Item -Path $CACHEDIR -ItemType Directory -Force
New-Item -Path $CONFIGDIR -ItemType Directory -Force
New-Item -Path $LOGDIR -ItemType Directory -Force
New-Item -Path $TOOLSDIR -ItemType Directory -Force

# Download the managedreport-runner binary
Invoke-WebRequest -Uri "${BASEURL}assets/client_installer_win/payload/managedreport-runner.exe" `
    -OutFile "$INSTALLDIR\managedreport-runner.exe"

# Retrieve list of module scripts dynamically (similar to macOS logic)
$scripts = @(<?php
    $script_list = [];
    foreach($install_scripts AS $scriptname => $filepath) {
        $script_file = strtolower($scriptname).".ps1";
        $script_list[] = "'$script_file'";
    }
    echo implode(", ", $script_list);
?>)

foreach ($script in $scripts) {
    $scriptUrl = "${BASEURL}assets/client_installer_win/payload/scripts/$script"
    Invoke-WebRequest $scriptUrl -OutFile "$SCRIPTSDIR\$script"
}

# Generate preferences.json
$config = @{
    BaseURL = $BASEURL
    Modules = @($scripts)
}

# Optionally, add advanced preferences (commented examples exactly like macOS)
/*
$config["ScriptTimeout"] = 30
$config["UseMunkiAdditionalHttpHeaders"] = $false
$config["Passphrase"] = "REPLACE_WITH_PASSPHRASE"
*/

$config | ConvertTo-Json -Depth 4 | Out-File "$CONFIGDIR\preferences.json" -Encoding UTF8

# Create filewatcher.ps1 (daemon equivalent)
$fileWatcherScript = @"
`$triggerFile = '$INSTALLDIR\trigger.run'
`$runnerExe = '$INSTALLDIR\managedreport-runner.exe'

Write-Host 'Watching for ' `$triggerFile '...'

`$watcher = New-Object System.IO.FileSystemWatcher
`$watcher.Path = Split-Path `$triggerFile
`$watcher.Filter = Split-Path `$triggerFile -Leaf
`$watcher.NotifyFilter = [System.IO.NotifyFilters]'FileName, LastWrite'

`$action = {
    Write-Host 'Trigger detected, running Managed Reporting...'
    & `$runnerExe
    Remove-Item `$triggerFile -Force -ErrorAction SilentlyContinue
}

Register-ObjectEvent `$watcher 'Created' -Action `$action
Register-ObjectEvent `$watcher 'Changed' -Action `$action

while (`$true) { Start-Sleep -Seconds 5 }
"@
$fileWatcherScript | Out-File "$TOOLSDIR\filewatcher.ps1" -Encoding UTF8 -Force

# Create Scheduled Task to run the file watcher at startup
$action = New-ScheduledTaskAction -Execute "pwsh.exe" `
    -Argument "-NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -File $TOOLSDIR\filewatcher.ps1"
$trigger = New-ScheduledTaskTrigger -AtStartup
$principal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount

Register-ScheduledTask `
    -Action $action `
    -Trigger $trigger `
    -Principal $principal `
    -TaskName "ManagedReportingWatcher" `
    -Description "File watcher for ManagedReporting trigger.run" `
    -Force

Write-Host "ManagedReporting Windows installation completed successfully."